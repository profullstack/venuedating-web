{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * @profullstack/localizer\n * A simple localization and internationalization library\n */\n\n// Types\nexport interface LocalizerOptions {\n  defaultLanguage?: string;\n  fallbackLanguage?: string;\n  translations?: Record<string, Record<string, string>>;\n  interpolationStart?: string;\n  interpolationEnd?: string;\n  rtlLanguages?: string[];\n}\n\nexport interface TranslationOptions {\n  [key: string]: any;\n  count?: number;\n  language?: string;\n}\n\n// Default options\nconst DEFAULT_OPTIONS: LocalizerOptions = {\n  defaultLanguage: 'en',\n  fallbackLanguage: 'en',\n  translations: {},\n  interpolationStart: '${',\n  interpolationEnd: '}',\n  rtlLanguages: ['ar', 'he', 'fa', 'ur']\n};\n\nclass Localizer {\n  private options: Required<LocalizerOptions>;\n  private currentLanguage: string;\n  private observer: MutationObserver | null = null;\n  \n  constructor(options: LocalizerOptions = {}) {\n    this.options = { ...DEFAULT_OPTIONS, ...options } as Required<LocalizerOptions>;\n    this.currentLanguage = this.options.defaultLanguage;\n  }\n\n  /**\n   * Load translations from a JSON object\n   * @param language The language code\n   * @param translations The translations object\n   */\n  public loadTranslations(language: string, translations: Record<string, string>): void {\n    if (!this.options.translations[language]) {\n      this.options.translations[language] = {};\n    }\n    \n    this.options.translations[language] = {\n      ...this.options.translations[language],\n      ...translations\n    };\n  }\n\n  /**\n   * Set the current language\n   * @param language The language code to set\n   */\n  public setLanguage(language: string): void {\n    const previousLanguage = this.currentLanguage;\n    \n    if (this.options.translations[language] || language === this.options.fallbackLanguage) {\n      this.currentLanguage = language;\n    } else {\n      console.warn(`Language '${language}' not loaded, using fallback language '${this.options.fallbackLanguage}'`);\n      this.currentLanguage = this.options.fallbackLanguage;\n    }\n    \n    // Dispatch language change event if running in browser environment\n    if (typeof window !== 'undefined' && previousLanguage !== this.currentLanguage) {\n      const isRTL = this.isRTL();\n      window.dispatchEvent(new CustomEvent('language-changed', {\n        detail: {\n          language: this.currentLanguage,\n          previousLanguage,\n          isRTL\n        }\n      }));\n    }\n  }\n  \n  /**\n   * Check if the current language is RTL (Right-to-Left)\n   * @returns True if the current language is RTL\n   */\n  public isRTL(): boolean {\n    return this.options.rtlLanguages?.includes(this.currentLanguage) || false;\n  }\n  \n  /**\n   * Check if a specific language is RTL (Right-to-Left)\n   * @param language The language code to check\n   * @returns True if the language is RTL\n   */\n  public isLanguageRTL(language: string): boolean {\n    return this.options.rtlLanguages?.includes(language) || false;\n  }\n\n  /**\n   * Get the current language\n   * @returns The current language code\n   */\n  public getLanguage(): string {\n    return this.currentLanguage;\n  }\n\n  /**\n   * Get available languages\n   * @returns Array of available language codes\n   */\n  public getAvailableLanguages(): string[] {\n    return Object.keys(this.options.translations);\n  }\n\n  /**\n   * Translate a key\n   * @param key The translation key\n   * @param options Options for translation (interpolation values, count for pluralization, etc.)\n   * @returns The translated string\n   */\n  public translate(key: string, options: TranslationOptions = {}): string {\n    const language = options.language || this.currentLanguage;\n    \n    // Get translations for the current language\n    const translations = this.options.translations[language] || {};\n    \n    // Try to get the translation\n    let translation = translations[key];\n    \n    // If not found, try fallback language\n    if (!translation && language !== this.options.fallbackLanguage) {\n      const fallbackTranslations = this.options.translations[this.options.fallbackLanguage] || {};\n      translation = fallbackTranslations[key];\n    }\n    \n    // If still not found, return the key itself\n    if (!translation) {\n      console.warn(`Translation key '${key}' not found in '${language}' or fallback language`);\n      return key;\n    }\n    \n    // Handle pluralization if count is provided\n    if (options.count !== undefined) {\n      const pluralKey = `${key}_${options.count === 1 ? 'one' : 'other'}`;\n      const pluralTranslation = translations[pluralKey] || \n                              (language !== this.options.fallbackLanguage ? \n                                this.options.translations[this.options.fallbackLanguage]?.[pluralKey] : \n                                undefined);\n      \n      if (pluralTranslation) {\n        translation = pluralTranslation;\n      }\n    }\n    \n    // Handle interpolation\n    return this.interpolate(translation, options);\n  }\n\n  /**\n   * Replace interpolation placeholders with values\n   * @param text The text with placeholders\n   * @param values The values to interpolate\n   * @returns The interpolated string\n   */\n  private interpolate(text: string, values: Record<string, any>): string {\n    const { interpolationStart, interpolationEnd } = this.options;\n    \n    return text.replace(\n      new RegExp(`${escapeRegExp(interpolationStart)}(\\\\w+)${escapeRegExp(interpolationEnd)}`, 'g'),\n      (match, key) => {\n        return values[key] !== undefined ? String(values[key]) : match;\n      }\n    );\n  }\n\n  /**\n   * Load translations from a JSON file (browser environment)\n   * @param language The language code\n   * @param url The URL to the JSON file\n   * @returns Promise that resolves when translations are loaded\n   */\n  public async loadTranslationsFromUrl(language: string, url: string): Promise<void> {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to load translations: ${response.statusText}`);\n      }\n      \n      const translations = await response.json();\n      this.loadTranslations(language, this.flattenObject(translations));\n    } catch (error) {\n      console.error(`Error loading translations for '${language}':`, error);\n    }\n  }\n\n  /**\n   * Flatten a nested object into a flat object with dot notation keys\n   * @param obj The object to flatten\n   * @param prefix The prefix to use for keys\n   * @returns The flattened object\n   */\n  private flattenObject(obj: Record<string, any>, prefix: string = ''): Record<string, string> {\n    return Object.keys(obj).reduce((acc: Record<string, string>, key: string) => {\n      const prefixedKey = prefix ? `${prefix}.${key}` : key;\n      \n      if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n        Object.assign(acc, this.flattenObject(obj[key], prefixedKey));\n      } else {\n        acc[prefixedKey] = obj[key];\n      }\n      \n      return acc;\n    }, {});\n  }\n\n  /**\n   * Translate all elements with i18n attributes in the document or container\n   * @param container Optional container element (defaults to document.body)\n   */\n  public translateDOM(container?: HTMLElement): void {\n    if (typeof document === 'undefined') return; // Skip in non-browser environments\n    \n    const root = container || document.body;\n    \n    // Translate elements with data-i18n attribute\n    this.translateElementsByAttribute(root.querySelectorAll('[data-i18n]'), 'data-i18n', 'textContent');\n    \n    // Translate elements with data-i18n-placeholder attribute\n    this.translateElementsByAttribute(root.querySelectorAll('[data-i18n-placeholder]'), 'data-i18n-placeholder', 'placeholder');\n    \n    // Translate elements with data-i18n-title attribute\n    this.translateElementsByAttribute(root.querySelectorAll('[data-i18n-title]'), 'data-i18n-title', 'title');\n    \n    // Translate elements with data-i18n-html attribute\n    this.translateElementsByAttribute(root.querySelectorAll('[data-i18n-html]'), 'data-i18n-html', 'innerHTML');\n    \n    // Handle elements with data-i18n-params attribute\n    root.querySelectorAll('[data-i18n-params]').forEach(element => {\n      const key = element.getAttribute('data-i18n');\n      if (!key) return;\n      \n      try {\n        const paramsAttr = element.getAttribute('data-i18n-params');\n        if (!paramsAttr) return;\n        \n        const params = JSON.parse(paramsAttr);\n        element.textContent = this.translate(key, params);\n      } catch (error) {\n        console.error(`Error parsing data-i18n-params for key ${key}:`, error);\n      }\n    });\n  }\n  \n  /**\n   * Translate elements by attribute\n   * @private\n   */\n  private translateElementsByAttribute(\n    elements: NodeListOf<Element>, \n    attribute: string, \n    property: string\n  ): void {\n    elements.forEach(element => {\n      const key = element.getAttribute(attribute);\n      if (!key) return;\n      \n      // @ts-ignore - Property may not exist on all elements\n      element[property] = this.translate(key);\n    });\n  }\n\n  /**\n   * Translate a specific container\n   * @param container The container element to translate\n   */\n  public translateContainer(container: HTMLElement): void {\n    this.translateDOM(container);\n  }\n  \n  /**\n   * Set up a MutationObserver to automatically translate new elements\n   * @param rootElement The root element to observe (defaults to document.body)\n   * @returns A function to stop observing\n   */\n  public observeDOM(rootElement?: HTMLElement): () => void {\n    if (typeof MutationObserver === 'undefined' || typeof document === 'undefined') {\n      return () => {}; // Skip in non-browser environments\n    }\n    \n    const root = rootElement || document.body;\n    \n    // Disconnect any existing observer\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n    \n    this.observer = new MutationObserver((mutations) => {\n      let shouldTranslate = false;\n      \n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              // Check if the node or any of its children have data-i18n attributes\n              const element = node as HTMLElement;\n              if (\n                element.hasAttribute && (\n                  element.hasAttribute('data-i18n') ||\n                  element.hasAttribute('data-i18n-placeholder') ||\n                  element.hasAttribute('data-i18n-title') ||\n                  element.hasAttribute('data-i18n-html') ||\n                  element.hasAttribute('data-i18n-params') ||\n                  element.querySelector('[data-i18n], [data-i18n-placeholder], [data-i18n-title], [data-i18n-html], [data-i18n-params]')\n                )\n              ) {\n                shouldTranslate = true;\n              }\n            }\n          });\n        }\n      });\n      \n      if (shouldTranslate) {\n        this.translateDOM(root);\n      }\n    });\n    \n    this.observer.observe(root, {\n      childList: true,\n      subtree: true\n    });\n    \n    return () => {\n      if (this.observer) {\n        this.observer.disconnect();\n        this.observer = null;\n      }\n    };\n  }\n  \n  /**\n   * Stop observing DOM changes\n   */\n  public stopObservingDOM(): void {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  }\n  \n  /**\n   * Apply RTL direction to the document\n   * @param documentElement The document element (defaults to document.documentElement)\n   * @param bodyElement The body element (defaults to document.body)\n   */\n  public applyRTLToDocument(\n    documentElement?: HTMLElement,\n    bodyElement?: HTMLElement\n  ): void {\n    if (typeof document === 'undefined') return; // Skip in non-browser environments\n    \n    const docElement = documentElement || document.documentElement as HTMLElement;\n    const body = bodyElement || document.body;\n    \n    const isRTL = this.isRTL();\n    \n    // Set the dir attribute on the html element\n    docElement.dir = isRTL ? 'rtl' : 'ltr';\n    \n    // Add or remove RTL class to the body\n    if (isRTL) {\n      body.classList.add('rtl');\n      \n      // Add RTL stylesheet if it's not already added\n      if (typeof document !== 'undefined' && !document.getElementById('rtl-stylesheet')) {\n        const rtlStylesheet = document.createElement('link');\n        rtlStylesheet.id = 'rtl-stylesheet';\n        rtlStylesheet.rel = 'stylesheet';\n        rtlStylesheet.href = '/css/rtl.css';\n        document.head.appendChild(rtlStylesheet);\n      }\n    } else {\n      body.classList.remove('rtl');\n      \n      // Remove RTL stylesheet if it exists\n      if (typeof document !== 'undefined') {\n        const rtlStylesheet = document.getElementById('rtl-stylesheet');\n        if (rtlStylesheet) {\n          rtlStylesheet.remove();\n        }\n      }\n    }\n  }\n}\n\n/**\n * Escape special characters in a string for use in a regular expression\n */\nfunction escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n// Create a singleton instance\nconst localizer = new Localizer();\n\n/**\n * Translate function (shorthand for localizer.translate)\n */\nexport function _t(key: string, options: TranslationOptions = {}): string {\n  return localizer.translate(key, options);\n}\n\n// Export the singleton and the class\nexport { localizer, Localizer };\n\n// Default export for convenience\nexport default localizer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA,IAAM,kBAAoC;AAAA,EACxC,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,cAAc,CAAC;AAAA,EACf,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAClB,cAAc,CAAC,MAAM,MAAM,MAAM,IAAI;AACvC;AAEA,IAAM,YAAN,MAAgB;AAAA,EAKd,YAAY,UAA4B,CAAC,GAAG;AAF5C,SAAQ,WAAoC;AAG1C,SAAK,UAAU,EAAE,GAAG,iBAAiB,GAAG,QAAQ;AAChD,SAAK,kBAAkB,KAAK,QAAQ;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,iBAAiB,UAAkB,cAA4C;AACpF,QAAI,CAAC,KAAK,QAAQ,aAAa,QAAQ,GAAG;AACxC,WAAK,QAAQ,aAAa,QAAQ,IAAI,CAAC;AAAA,IACzC;AAEA,SAAK,QAAQ,aAAa,QAAQ,IAAI;AAAA,MACpC,GAAG,KAAK,QAAQ,aAAa,QAAQ;AAAA,MACrC,GAAG;AAAA,IACL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,YAAY,UAAwB;AACzC,UAAM,mBAAmB,KAAK;AAE9B,QAAI,KAAK,QAAQ,aAAa,QAAQ,KAAK,aAAa,KAAK,QAAQ,kBAAkB;AACrF,WAAK,kBAAkB;AAAA,IACzB,OAAO;AACL,cAAQ,KAAK,aAAa,QAAQ,0CAA0C,KAAK,QAAQ,gBAAgB,GAAG;AAC5G,WAAK,kBAAkB,KAAK,QAAQ;AAAA,IACtC;AAGA,QAAI,OAAO,WAAW,eAAe,qBAAqB,KAAK,iBAAiB;AAC9E,YAAM,QAAQ,KAAK,MAAM;AACzB,aAAO,cAAc,IAAI,YAAY,oBAAoB;AAAA,QACvD,QAAQ;AAAA,UACN,UAAU,KAAK;AAAA,UACf;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,QAAiB;AACtB,WAAO,KAAK,QAAQ,cAAc,SAAS,KAAK,eAAe,KAAK;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAc,UAA2B;AAC9C,WAAO,KAAK,QAAQ,cAAc,SAAS,QAAQ,KAAK;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,cAAsB;AAC3B,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,wBAAkC;AACvC,WAAO,OAAO,KAAK,KAAK,QAAQ,YAAY;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,KAAa,UAA8B,CAAC,GAAW;AACtE,UAAM,WAAW,QAAQ,YAAY,KAAK;AAG1C,UAAM,eAAe,KAAK,QAAQ,aAAa,QAAQ,KAAK,CAAC;AAG7D,QAAI,cAAc,aAAa,GAAG;AAGlC,QAAI,CAAC,eAAe,aAAa,KAAK,QAAQ,kBAAkB;AAC9D,YAAM,uBAAuB,KAAK,QAAQ,aAAa,KAAK,QAAQ,gBAAgB,KAAK,CAAC;AAC1F,oBAAc,qBAAqB,GAAG;AAAA,IACxC;AAGA,QAAI,CAAC,aAAa;AAChB,cAAQ,KAAK,oBAAoB,GAAG,mBAAmB,QAAQ,wBAAwB;AACvF,aAAO;AAAA,IACT;AAGA,QAAI,QAAQ,UAAU,QAAW;AAC/B,YAAM,YAAY,GAAG,GAAG,IAAI,QAAQ,UAAU,IAAI,QAAQ,OAAO;AACjE,YAAM,oBAAoB,aAAa,SAAS,MACvB,aAAa,KAAK,QAAQ,mBACzB,KAAK,QAAQ,aAAa,KAAK,QAAQ,gBAAgB,IAAI,SAAS,IACpE;AAE1B,UAAI,mBAAmB;AACrB,sBAAc;AAAA,MAChB;AAAA,IACF;AAGA,WAAO,KAAK,YAAY,aAAa,OAAO;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,YAAY,MAAc,QAAqC;AACrE,UAAM,EAAE,oBAAoB,iBAAiB,IAAI,KAAK;AAEtD,WAAO,KAAK;AAAA,MACV,IAAI,OAAO,GAAG,aAAa,kBAAkB,CAAC,SAAS,aAAa,gBAAgB,CAAC,IAAI,GAAG;AAAA,MAC5F,CAAC,OAAO,QAAQ;AACd,eAAO,OAAO,GAAG,MAAM,SAAY,OAAO,OAAO,GAAG,CAAC,IAAI;AAAA,MAC3D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,wBAAwB,UAAkB,KAA4B;AACjF,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,GAAG;AAChC,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,IAAI,MAAM,gCAAgC,SAAS,UAAU,EAAE;AAAA,MACvE;AAEA,YAAM,eAAe,MAAM,SAAS,KAAK;AACzC,WAAK,iBAAiB,UAAU,KAAK,cAAc,YAAY,CAAC;AAAA,IAClE,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,QAAQ,MAAM,KAAK;AAAA,IACtE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,cAAc,KAA0B,SAAiB,IAA4B;AAC3F,WAAO,OAAO,KAAK,GAAG,EAAE,OAAO,CAAC,KAA6B,QAAgB;AAC3E,YAAM,cAAc,SAAS,GAAG,MAAM,IAAI,GAAG,KAAK;AAElD,UAAI,OAAO,IAAI,GAAG,MAAM,YAAY,IAAI,GAAG,MAAM,QAAQ,CAAC,MAAM,QAAQ,IAAI,GAAG,CAAC,GAAG;AACjF,eAAO,OAAO,KAAK,KAAK,cAAc,IAAI,GAAG,GAAG,WAAW,CAAC;AAAA,MAC9D,OAAO;AACL,YAAI,WAAW,IAAI,IAAI,GAAG;AAAA,MAC5B;AAEA,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,WAA+B;AACjD,QAAI,OAAO,aAAa,YAAa;AAErC,UAAM,OAAO,aAAa,SAAS;AAGnC,SAAK,6BAA6B,KAAK,iBAAiB,aAAa,GAAG,aAAa,aAAa;AAGlG,SAAK,6BAA6B,KAAK,iBAAiB,yBAAyB,GAAG,yBAAyB,aAAa;AAG1H,SAAK,6BAA6B,KAAK,iBAAiB,mBAAmB,GAAG,mBAAmB,OAAO;AAGxG,SAAK,6BAA6B,KAAK,iBAAiB,kBAAkB,GAAG,kBAAkB,WAAW;AAG1G,SAAK,iBAAiB,oBAAoB,EAAE,QAAQ,aAAW;AAC7D,YAAM,MAAM,QAAQ,aAAa,WAAW;AAC5C,UAAI,CAAC,IAAK;AAEV,UAAI;AACF,cAAM,aAAa,QAAQ,aAAa,kBAAkB;AAC1D,YAAI,CAAC,WAAY;AAEjB,cAAM,SAAS,KAAK,MAAM,UAAU;AACpC,gBAAQ,cAAc,KAAK,UAAU,KAAK,MAAM;AAAA,MAClD,SAAS,OAAO;AACd,gBAAQ,MAAM,0CAA0C,GAAG,KAAK,KAAK;AAAA,MACvE;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,6BACN,UACA,WACA,UACM;AACN,aAAS,QAAQ,aAAW;AAC1B,YAAM,MAAM,QAAQ,aAAa,SAAS;AAC1C,UAAI,CAAC,IAAK;AAGV,cAAQ,QAAQ,IAAI,KAAK,UAAU,GAAG;AAAA,IACxC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,mBAAmB,WAA8B;AACtD,SAAK,aAAa,SAAS;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,aAAuC;AACvD,QAAI,OAAO,qBAAqB,eAAe,OAAO,aAAa,aAAa;AAC9E,aAAO,MAAM;AAAA,MAAC;AAAA,IAChB;AAEA,UAAM,OAAO,eAAe,SAAS;AAGrC,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,WAAW;AAAA,IAC3B;AAEA,SAAK,WAAW,IAAI,iBAAiB,CAAC,cAAc;AAClD,UAAI,kBAAkB;AAEtB,gBAAU,QAAQ,cAAY;AAC5B,YAAI,SAAS,SAAS,eAAe,SAAS,WAAW,QAAQ;AAC/D,mBAAS,WAAW,QAAQ,UAAQ;AAClC,gBAAI,KAAK,aAAa,KAAK,cAAc;AAEvC,oBAAM,UAAU;AAChB,kBACE,QAAQ,iBACN,QAAQ,aAAa,WAAW,KAChC,QAAQ,aAAa,uBAAuB,KAC5C,QAAQ,aAAa,iBAAiB,KACtC,QAAQ,aAAa,gBAAgB,KACrC,QAAQ,aAAa,kBAAkB,KACvC,QAAQ,cAAc,+FAA+F,IAEvH;AACA,kCAAkB;AAAA,cACpB;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAED,UAAI,iBAAiB;AACnB,aAAK,aAAa,IAAI;AAAA,MACxB;AAAA,IACF,CAAC;AAED,SAAK,SAAS,QAAQ,MAAM;AAAA,MAC1B,WAAW;AAAA,MACX,SAAS;AAAA,IACX,CAAC;AAED,WAAO,MAAM;AACX,UAAI,KAAK,UAAU;AACjB,aAAK,SAAS,WAAW;AACzB,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKO,mBAAyB;AAC9B,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,WAAW;AACzB,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,mBACL,iBACA,aACM;AACN,QAAI,OAAO,aAAa,YAAa;AAErC,UAAM,aAAa,mBAAmB,SAAS;AAC/C,UAAM,OAAO,eAAe,SAAS;AAErC,UAAM,QAAQ,KAAK,MAAM;AAGzB,eAAW,MAAM,QAAQ,QAAQ;AAGjC,QAAI,OAAO;AACT,WAAK,UAAU,IAAI,KAAK;AAGxB,UAAI,OAAO,aAAa,eAAe,CAAC,SAAS,eAAe,gBAAgB,GAAG;AACjF,cAAM,gBAAgB,SAAS,cAAc,MAAM;AACnD,sBAAc,KAAK;AACnB,sBAAc,MAAM;AACpB,sBAAc,OAAO;AACrB,iBAAS,KAAK,YAAY,aAAa;AAAA,MACzC;AAAA,IACF,OAAO;AACL,WAAK,UAAU,OAAO,KAAK;AAG3B,UAAI,OAAO,aAAa,aAAa;AACnC,cAAM,gBAAgB,SAAS,eAAe,gBAAgB;AAC9D,YAAI,eAAe;AACjB,wBAAc,OAAO;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAKA,SAAS,aAAa,QAAwB;AAC5C,SAAO,OAAO,QAAQ,uBAAuB,MAAM;AACrD;AAGA,IAAM,YAAY,IAAI,UAAU;AAKzB,SAAS,GAAG,KAAa,UAA8B,CAAC,GAAW;AACxE,SAAO,UAAU,UAAU,KAAK,OAAO;AACzC;AAMA,IAAO,gBAAQ;","names":[]}